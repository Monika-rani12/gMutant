CBMC version 5.11 (cbmc-5.11) 64-bit x86_64 linux
Parsing mcdc_program.c
Converting
Type-checking mcdc_program
Generating GOTO Program
Adding CPROVER library (x86_64)
Removal of function pointers and virtual functions
Generic Property Instrumentation
Rewriting existing assertions as assumptions
Running with 8 object bits, 56 offset bits (default)
Starting Bounded Model Checking
size of program expression: 57 steps
Generated 14 VCC(s), 13 remaining after simplification
Passing problem to string refinement loop with MiniSAT 2.2.1 without simplifier
converting SSA
Aiming to cover 16 goal(s)
Running string refinement loop with MiniSAT 2.2.1 without simplifier
BV-Refinement: post-processing
BV-Refinement: iteration 1
469 variables, 720 clauses
SAT checker: instance is SATISFIABLE
BV-Refinement: got SAT, and it simulates => SAT
Total iterations: 1
Covered function main decision `X > 50 && Y == 100 || Z < 90' true
Covered function main condition `X > 50' false
Covered function main condition `Y == 100' false
Covered function main condition `Z < 90' true
Covered function main decision/condition `X != 50' false
BV-Refinement: post-processing
BV-Refinement: iteration 1
469 variables, 712 clauses
SAT checker: instance is SATISFIABLE
BV-Refinement: got SAT, and it simulates => SAT
Total iterations: 1
Covered function main condition `X > 50' true
BV-Refinement: post-processing
BV-Refinement: iteration 1
469 variables, 713 clauses
SAT checker: instance is SATISFIABLE
BV-Refinement: got SAT, and it simulates => SAT
Total iterations: 1
Covered function main condition `Y == 100' true
BV-Refinement: post-processing
BV-Refinement: iteration 1
469 variables, 714 clauses
SAT checker: instance is SATISFIABLE
BV-Refinement: got SAT, and it simulates => SAT
Total iterations: 1
Covered function main MC/DC independence condition `!(Z < 90) && X > 50 && Y == 100'
Covered function main condition `Z < 90' false
BV-Refinement: post-processing
BV-Refinement: iteration 1
469 variables, 715 clauses
SAT checker: instance is SATISFIABLE
BV-Refinement: got SAT, and it simulates => SAT
Total iterations: 1
Covered function main MC/DC independence condition `!(Z < 90) && !(X > 50) && Y == 100'
Covered function main decision `X > 50 && Y == 100 || Z < 90' false
BV-Refinement: post-processing
BV-Refinement: iteration 1
469 variables, 716 clauses
SAT checker: instance is SATISFIABLE
BV-Refinement: got SAT, and it simulates => SAT
Total iterations: 1
Covered function main MC/DC independence condition `Z < 90 && !(X > 50) && Y == 100'
BV-Refinement: post-processing
BV-Refinement: iteration 1
469 variables, 713 clauses
SAT checker: instance is SATISFIABLE
BV-Refinement: got SAT, and it simulates => SAT
Total iterations: 1
Covered function main MC/DC independence condition `!(Z < 90) && X > 50 && !(Y == 100)'
BV-Refinement: post-processing
BV-Refinement: iteration 1
469 variables, 713 clauses
SAT checker inconsistent: instance is UNSATISFIABLE
BV-Refinement: got UNSAT, and the proof passes => UNSAT
Total iterations: 1
Runtime decision procedure: 0.00189326s

** coverage results:
[main.coverage.1] file mcdc_program.c line 7 function main MC/DC independence condition `!(Z < 90) && !(X > 50) && Y == 100': SATISFIED
[main.coverage.2] file mcdc_program.c line 7 function main MC/DC independence condition `!(Z < 90) && X > 50 && !(Y == 100)': SATISFIED
[main.coverage.3] file mcdc_program.c line 7 function main MC/DC independence condition `!(Z < 90) && X > 50 && Y == 100': SATISFIED
[main.coverage.4] file mcdc_program.c line 7 function main MC/DC independence condition `Z < 90 && !(X > 50) && Y == 100': SATISFIED
[main.coverage.5] file mcdc_program.c line 7 function main decision `X > 50 && Y == 100 || Z < 90' false: SATISFIED
[main.coverage.6] file mcdc_program.c line 7 function main decision `X > 50 && Y == 100 || Z < 90' true: SATISFIED
[main.coverage.7] file mcdc_program.c line 7 function main condition `X > 50' false: SATISFIED
[main.coverage.8] file mcdc_program.c line 7 function main condition `X > 50' true: SATISFIED
[main.coverage.9] file mcdc_program.c line 7 function main condition `Y == 100' false: SATISFIED
[main.coverage.10] file mcdc_program.c line 7 function main condition `Y == 100' true: SATISFIED
[main.coverage.11] file mcdc_program.c line 7 function main condition `Z < 90' false: SATISFIED
[main.coverage.12] file mcdc_program.c line 7 function main condition `Z < 90' true: SATISFIED
[main.coverage.13] file mcdc_program.c line 11 function main decision/condition `X != 50' false: SATISFIED
[main.coverage.14] file mcdc_program.c line 11 function main decision/condition `X != 50' true: FAILED
[main.coverage.15] file mcdc_program.c line 12 function main decision/condition `Y == 100' false: FAILED
[main.coverage.16] file mcdc_program.c line 12 function main decision/condition `Y == 100' true: FAILED

** 13 of 16 covered (81.2%)
** Used 8 iterations
Test suite:
X=0, Y=0, Z=0
X=51, Y=0, Z=0
X=51, Y=100, Z=0
X=51, Y=100, Z=1073741824
X=35, Y=100, Z=1073741824
X=35, Y=100, Z=0
X=51, Y=356, Z=90

